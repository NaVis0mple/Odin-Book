#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('backend:server')
const http = require('http')
require('dotenv').config()

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

// socket.io
const { Server } = require('socket.io')
const io = new Server(server, {
  cors: {
    origin: process.env.NODE_ENV === 'development' ? process.env.frontendURL_DEVELOPMENT : process.env.frontendURL_PRODUCTION,
    credentials: true
  }
})
const connectedUsers = []
io.on('connection', (socket) => {
  console.log(socket.id + 'connect') // use this to get the id

  socket.on('disconnect', () => {
    console.log(socket.id + 'disconnected')
    const index = connectedUsers.findIndex((connection) => connection.socketid === socket.id)
    if (index !== -1) {
      // remove form array
      connectedUsers.splice(index, 1)
    }
    console.log(connectedUsers)
  })
  socket.on('connectinfo', (connectinfo) => {
    const newUser = { userid: connectinfo.userid, socketid: socket.id }
    const index = connectedUsers.findIndex((connection) => connection.socketid === socket.id)
    if (index === -1) {
      // User not found, add the new user to the array
      connectedUsers.push(newUser)
    } else {
      // User already in the array, you may want to update the existing user's information
      // For example, you can replace the existing user with the new user
      connectedUsers[index] = newUser
    }
  })
  socket.on('friendRequestPostNotification', (friendid) => {
    // notify friendid that someone add him
    const notifyId = friendid.friendrequestnameId
    const targetConnection = connectedUsers.find((connection) => connection.userid === notifyId)
    if (targetConnection) {
      io.to(targetConnection.socketid).emit('friendAddNotify', true)
      console.log(targetConnection.socketid + 'XXX')
    }
  })

  socket.on('friendRequestAcceptedNotification', (data) => {
    const targetConnection = connectedUsers.find((connection) => connection.userid === data.user._id)

    if (targetConnection) {
      io.to(targetConnection.socketid).emit('friendAcceptedNotify', data.friend.first_name + data.friend.last_name)
    }
  })
  socket.on('friendRequestRejectedNotification', (data) => {
    const targetConnection = connectedUsers.find((connection) => connection.userid === data.user._id)
    if (targetConnection) {
      console.log(targetConnection)
      io.to(targetConnection.socketid).emit('friendRejectedNotify', data.friend.first_name + data.friend.last_name)
    }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
